heat_template_version: 2013-05-23

description: |
  HEAT template for setting up a private instance WebPageTest on a single
  Windows Server.

parameter_groups:

- label: Server Settings
  parameters:
  - image
  - flavor

- label: rax-dev-params
  parameters:
  - server_hostname

parameters:

  # Server settings
  server_hostname:
    label: Server Hostname
    description: Hostname to use for the server that's built.
    type: string
    default: WebPageTest
    description: Windows Server Name

  image:
    label: Operating System
    description: |
      Required: Server image used for all servers that are created as a part of
      this deployment.
    type: string
    default: Windows Server 2012 R2
    constraints:
    - allowed_values:
      - Windows Server 2012 R2
      description: must be a supported OS

  flavor:
    label: Server Size
    description: |
      Cloud Server size to use for the database server. Sizes refer to the
      amount of RAM allocated to the server.
    type: string
    default: 4 GB Performance
    constraints:
    - allowed_values:
      - 2 GB Performance
      - 4 GB Performance
      - 8 GB Performance
      - 15 GB Performance
      - 30 GB Performance
      description: must be a valid Rackspace Cloud Server flavor.

resources:

  rs_windows_server:
    type: "Rackspace::Cloud::WinServer"
    properties:
      name: { get_param: server_hostname }
      flavor: { get_param: flavor }
      image: { get_param: image }
      save_admin_pass: true
      user_data:
        str_replace:
          template: |
            # AutoLogon
            $LogonPath = 'HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon'
            $Username = "{{ grains.host }}\{{ pillar['webpagetest']['win']['user'] }}"
            $Password = "{{ pillar['webpagetest']['win']['pass'] }}"
            Set-ItemProperty -Path $LogonPath -Name AutoAdminLogon -Value 1
            New-ItemProperty -Path $LogonPath -Name DefaultUserName -Value $Username
            New-ItemProperty -Path $LogonPath -Name DefaultPassword -Value $Password
            # Disable IE Enhanced Security
            $AdminKey = "HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components\{A509B1A7-37EF-4b3f-8CFC-4F3A74704073}"
            $UserKey = "HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components\{A509B1A8-37EF-4b3f-8CFC-4F3A74704073}"
            Set-ItemProperty -Path $AdminKey -Name "IsInstalled" -Value 0
            Set-ItemProperty -Path $UserKey -Name "IsInstalled" -Value 0
            # Disable ScreenSaver
            $Path = 'HKCU:\Control Panel\Desktop'
            Set-ItemProperty -Path $Path -Name ScreenSaveActive -Value 0
            # Disable Shutdown Tracking
            $Path = 'HKLM:\Software\Microsoft\Windows\CurrentVersion\Reliability'
            New-ItemProperty -Path $Path -Name ShutdownReasonUI -Value 0
            # Disable UAC
            $Path = "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System"
            Set-ItemProperty -Path $Path -Name "ConsentPromptBehaviorAdmin" -Value 00000000
            # Install AviSynth
            $InstallDir = "{{ pillar['webpagetest']['win']['install_dir'] }}"
            & "$InstallDir\agent\Avisynth_258.exe" /S
            # Disable Test Signing for DummyNET Driver
            bcdedit /set TESTSIGNING ON
            # Set a Stable Clock Source
            bcdedit /set  useplatformclock true
            # Download and Extract ZIP File
            $InstallDir = "{{ pillar['webpagetest']['win']['install_dir'] }}"
            $TempDir = "{{ pillar['webpagetest']['win']['temp_dir'] }}"
            $URL = "{{ pillar['webpagetest']['zipurl'] }}"
            $ZipFile = "$TempDir\{{ pillar['webpagetest']['win']['zip_file'] }}"
            function Expand-ZIPFile($file, $destination) {
              $shell = new-object -com shell.application
              $zip = $shell.NameSpace($file)
              foreach($item in $zip.items()) {
                $shell.Namespace($destination).copyhere($item)
              }
            }
            $TestDir = "$InstallDir\agent"
            $WebClient = New-Object System.Net.WebClient
            $WebClient.DownloadFile($URL,$ZipFile)
            Expand-ZIPFile -File $ZipFile -Destination $InstallDir
            # Set a Scheduled Task to Launch the wptdriver agent.
            $ThisHost = "{{ grains.host }}"
            $User = "{{ pillar['webpagetest']['win']['user'] }}"
            $InstallDir = "{{ pillar['webpagetest']['win']['install_dir'] }}\agent"
            $A = New-ScheduledTaskAction -Execute "$InstallDir\wptdriver.exe"
            $T = New-ScheduledTaskTrigger -AtLogon
            $S = New-ScheduledTaskSettingsSet
            $U = "$ThisHost\$User"
            $P = "{{ pillar['webpagetest']['win']['pass'] }}"
            $D = New-ScheduledTask -Action $A  -Trigger $T -Settings $S
            Register-ScheduledTask -TaskName "wptdriver" -InputObject $D -User $U -Password $P
            # Add the webpagetest user
            $Username = "{{ pillar['webpagetest']['win']['user'] }}"
            $Password = "{{ pillar['webpagetest']['win']['pass'] }}"
            net user /add $Username
            net localgroup Administrators /add $Username
            $user = [ADSI]("WinNT://./$Username")
            $user.SetPassword($Password)
            $user.SetInfo()
      params:
            "%%sitedomain" : { get_param:  domain }
            "%%ftpusername" : { get_param: ftp_username }
            "%%ftppassword" : { get_attr: [ftp_password,value] }

  # Random password generation
  ftp_password:
    type: OS::Heat::RandomString
    properties:
      length: 14
      character_classes:
        - class: digits
          min: 1
        - class: uppercase
          min: 1
        - class: lowercase
          min: 1

outputs:

  server_ip:
    value: { get_attr: [ rs_windows_server, accessIPv4 ] }
    description: Server IP

  admin_password:
    value: { get_attr: [ rs_windows_server, admin_pass] }
    description: Administrator Password

  site_domain:
    description: Website Domain name
    value: { get_param: domain }

  site_ftp_user:
    description: FTP User
    value: { get_param: ftp_username }

  site_ftp_password:
    description: FTP Password
    value: { get_attr: [ftp_password, value] }
