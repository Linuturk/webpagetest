heat_template_version: 2013-05-23

description: |
  HEAT template for setting up a private instance of WebPageTest on a single Windows
  Server

parameter_groups:

- label: Server Settings
  parameters:
  - image
  - flavor

- label: WebPageTest Application Settings
  parameters:
  - domain
  - wpt_username

- label: rax-dev-params
  parameters:
  - server_hostname

parameters:

  # Server settings
  server_hostname:
    label: Server Hostname
    description: Hostname to use for the server that's built.
    type: string
    default: webpagetest
    description: Windows Server Name

  image:
    label: Operating System
    description: |
      Required: Server image used for all servers that are created as a part of
      this deployment.
    type: string
    default: Windows Server 2012 R2
    constraints:
    - allowed_values:
      - Windows Server 2012 R2
      description: must be a supported OS

  flavor:
    label: Server Size
    description: |
      Cloud Server size to use for the database server. Sizes refer to the
      amount of RAM allocated to the server.
    type: string
    default: 4 GB Performance
    constraints:
    - allowed_values:
      - 2 GB Performance
      - 4 GB Performance
      - 8 GB Performance
      - 15 GB Performance
      - 30 GB Performance
      description: must be a valid Rackspace Cloud Server flavor.

  # WebPageTest settings
  domain:
    label: Site Domain
    description: Domain to be used with WebPageTest
    type: string
    default: "example.com"
    constraints:
    - allowed_pattern: "^[a-zA-Z0-9.-]{1,255}.[a-zA-Z]{2,15}$"
      description: Must be a valid domain name

  wpt_username:
    label: WebPageTest Username
    description: |
      WPT Username for the site. A password will be randomly generated for this
      account. This can not be the same as the Server Name.
    type: string
    default: "wptuser"
    constraints:
    - allowed_pattern: "^(?!^root$)([a-z0-9_]{1,16})$"
      description: Must be a valid username

resources:

  rs_windows_server:
    type: "Rackspace::Cloud::WinServer"
    properties:
      name: { get_param: server_hostname }
      flavor: { get_param: flavor }
      image: { get_param: image }
      save_admin_pass: true
      user_data:
        str_replace:
          template: |
            #region Deployment of Web Page Test
            Function Deploy-WebPagetest(){
                [CmdletBinding()]
                Param(
                    [String]$DomainName = "localhost",
                    [String]$Logfile = "C:\Windows\Temp\Deploy-WebPageTest.log",
                    [String]$wpt_host =  $env:COMPUTERNAME,
                    [String]$wpt_user = "wptuser",
                    [String]$wpt_password = "Passw0rd",
                    [String]$driver_installer_file = "mindinst.exe",
                    [String]$driver_installer_cert_file = "WPOFoundation.cer",
                    [String]$wpt_agent_dir = "c:\wpt-agent",
                    [String]$wpt_www_dir = "c:\wpt-www",
                    [String]$wpt_temp_dir = "C:\wpt-temp"
                )
                #region Create Log File
                if (!( Test-Path $Logfile)){
                    New-Item -Path "C:\Windows\Temp\Deploy-WebPageTest.log" -ItemType file
                }
                #endregion
                #region Write Log file
                Function Write-Log{
                    Param ([string]$logstring)
                    Add-content $Logfile -value $logstring
                }
                #endregion
                #region Variables
                # External Dependencies
                $wpt_zip_url =  "https://github.com/WPO-Foundation/webpagetest/releases/download/WebPagetest-2.15/webpagetest_2.15.zip"
                $wpi_msi_url = "http://download.microsoft.com/download/C/F/F/CFF3A0B8-99D4-41A2-AE1A-496C08BEB904/WebPlatformInstaller_amd64_en-US.msi"
                $vcpp_vc11_url = "http://download.microsoft.com/download/1/6/B/16B06F60-3B20-4FF2-B699-5E9B7962F9AE/VSU_4/vcredist_x86.exe"
                $apache_bin_url = "http://www.apachelounge.com/download/VC11/binaries/httpd-2.4.10-win32-VC11.zip"
                $php_bin_url = "http://windows.php.net/downloads/releases/php-5.4.32-Win32-VC9-x86.zip"
                $ffmeg_bin_file = "ffmpeg-20140829-git-4c92047-win32-static.zip"
                $wpt_zip_file = "webpagetest_2.15.zip"
                $wpi_msi_file = "WebPlatformInstaller_amd64_en-US.msi"
                $apache_bin_file = "httpd-2.4.10-win32-VC11.zip"
                $php_bin_file = "php-5.4.32-Win32-VC9-x86.zip"
                $php_apc_file = "PHP-5.4.8_APC-3.1.13_x86_vc9.zip"
                $vcpp_vc11_file = "vcredist_x86.exe"
                $webRoot = '$env:systemdrive\inetpub\wwwroot\'

                # Github Dependencies
                $php_ini_url = "https://raw.githubusercontent.com/Linuturk/webpagetest/master/heat/files/php.ini"
                $apache_conf_url = "https://raw.githubusercontent.com/Linuturk/webpagetest/master/heat/files/httpd.conf"
                $driver_installer_cert_url = "https://github.com/Linuturk/webpagetest/raw/master/webpagetest/powershell/WPOFoundation.cer"
                $wpt_locations_ini = "https://raw.githubusercontent.com/Linuturk/webpagetest/master/heat/files/locations.ini"
                $wpt_settings_ini = "https://raw.githubusercontent.com/Linuturk/webpagetest/master/heat/files/settings.ini"
                $wpt_feeds_inc = "https://raw.githubusercontent.com/Linuturk/webpagetest/master/heat/files/feeds.inc"
                $wpt_urlBlast_ini = "https://raw.githubusercontent.com/Linuturk/webpagetest/master/heat/files/urlBlast.ini"
                $wpt_wptdriver_ini = "https://raw.githubusercontent.com/Linuturk/webpagetest/master/heat/files/wptdriver.ini"

                # Scripts
                $DefaultUserNameURL = "https://raw.githubusercontent.com/Linuturk/webpagetest/master/heat/files/DefaultUserName.ps1"
                $FirstRebootURL = "https://raw.githubusercontent.com/Linuturk/webpagetest/master/heat/files/FirstReboot.ps1"
                $AgentUpdaterURL = "https://raw.githubusercontent.com/Linuturk/webpagetest/master/heat/files/Agent-Updater.ps1"

                # Cloud Files Dependencies
                $ffmeg_bin_url = "http://9cecab0681d23f5b71fb-642758a7a3ed7927f3ce8478e9844e11.r45.cf5.rackcdn.com/ffmpeg-20140829-git-4c92047-win32-static.zip"
                $php_apc_url = "http://9cecab0681d23f5b71fb-642758a7a3ed7927f3ce8478e9844e11.r45.cf5.rackcdn.com/PHP-5.4.8_APC-3.1.13_x86_vc9.zip"
                $driver_installer_url = "http://9cecab0681d23f5b71fb-642758a7a3ed7927f3ce8478e9844e11.r45.cf5.rackcdn.com/mindinst.exe"

               #endregion
                function Set-WptFolders(){
                    $wpt_folders = @($wpt_agent_dir,$wpt_www_dir,$wpt_temp_dir)
                    foreach ($wpt_folder in $wpt_folders){
                        New-Item $wpt_folder -type directory -Force *>> $Logfile
                    }
                }
                function Download-File ($url, $localpath, $filename){
                    if(!(Test-Path -Path $localpath)){
                        New-Item $localpath -type directory *>> $Logfile
                    }
                    Write-Log "[$(Get-Date)] Downloading $filename"
                    $webclient = New-Object System.Net.WebClient;
                    $webclient.DownloadFile($url, $localpath + "\" + $filename)
                }
                function Unzip-File($fileName, $sourcePath, $destinationPath){
                    Write-Log "[$(Get-Date)] Unzipping $filename to $destinationPath"
                    $shell = new-object -com shell.application
                    if (!(Test-Path "$sourcePath\$fileName")){
                        throw "$sourcePath\$fileName does not exist"
                    }
                    New-Item -ItemType Directory -Force -Path $destinationPath -WarningAction SilentlyContinue *>> $Logfile
                    $shell.namespace($destinationPath).copyhere($shell.namespace("$sourcePath\$fileName").items()) *>> $Logfile
                }
                function Install-MSI ($MsiPath, $MsiFile){
                    $BuildArgs = @{
                        FilePath = "msiexec"
                        ArgumentList = "/quiet /passive /i " + $MsiPath + "\" + $MsiFile
                        Wait = $true
                    }
                    Try {
                        Write-Log "[$(Get-Date)] Installing $MsiFile"
                        Start-Process @BuildArgs  *>> $Logfile
                    }
                    Catch {
                        throw "Error installing Web Platform Installer: $_"
                    }
                }
                function Replace-String ($filePath, $stringToReplace, $replaceWith){
                    (get-content $filePath) | foreach-object {$_ -replace $stringToReplace, $replaceWith} | set-content $filePath *>> $Logfile
                }
                function Set-WebPageTestUser ($Username, $Password){
                    $Exists = [ADSI]::Exists("WinNT://./$Username")
                    if ($Exists) {
                        Write-Log "[$(Get-Date)] $Username user already exists."
                    } Else {
                        net user /add $Username *>> $Logfile
                        net localgroup Administrators /add $Username *>> $Logfile
                        $user = [ADSI]("WinNT://./$Username")
                        $user.SetPassword($Password)
                        $user.SetInfo()
                        Write-Log "[$(Get-Date)] $Username created."
                    }
                }
                function Set-AutoLogon ($Username, $Password){
                    $LogonPath = 'HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon'
                    $CurrentVal = Get-ItemProperty -Path $LogonPath -Name AutoAdminLogon
                    If ($CurrentVal.AutoAdminLogon -eq 1) {
                        $CurrentUser = Get-ItemProperty -Path $LogonPath -Name DefaultUserName
                        $CurrentPass = Get-ItemProperty -Path $LogonPath -Name DefaultPassword
                        If ($CurrentUser.DefaultUserName -ne $Username -Or $CurrentPass.DefaultPassword -ne $Password) {
                            Set-ItemProperty -Path $LogonPath -Name DefaultUserName -Value $Username
                            Set-ItemProperty -Path $LogonPath -Name DefaultPassword -Value $Password
                            Write-Log "[$(Get-Date)] Credentials Updated."
                        }Else {
                            Write-Log "[$(Get-Date)] AutoLogon already enabled."
                        }
                    }Else {
                        Set-ItemProperty -Path $LogonPath -Name AutoAdminLogon -Value 1
                        New-ItemProperty -Path $LogonPath -Name DefaultUserName -Value $Username
                        New-ItemProperty -Path $LogonPath -Name DefaultPassword -Value $Password
                        Write-Log "[$(Get-Date)] AutoLogon enabled."
                    }
                }
                function Set-DisableServerManager (){
                    $CurrentState = Get-ScheduledTask -TaskName "ServerManager"
                    If ($CurrentState.State -eq "Ready") {
                        Get-ScheduledTask -TaskName "ServerManager" | Disable-ScheduledTask *>> $Logfile
                        Write-Log "[$(Get-Date)] Server Manager disabled at logon."
                    } Else {
                        Write-Log "[$(Get-Date)] Server Manager already disabled at logon."
                    }
                }
                function Set-MonitorTimeout (){
                    $CurrentVal = POWERCFG /QUERY SCHEME_BALANCED SUB_VIDEO VIDEOIDLE | Select-String -pattern "Current AC Power Setting Index:"
                    If ($CurrentVal -like "*0x00000000*") {
                        Write-Log "[$(Get-Date)] Display Timeout already set to Never."
                    } Else {
                        POWERCFG /CHANGE -monitor-timeout-ac 0
                        Write-Log "[$(Get-Date)] Display Timeout set to Never."
                    }
                }
                function Set-DisableScreensaver (){
                    $Path = 'HKCU:\Control Panel\Desktop'
                    Try {
                      $CurrentVal = Get-ItemProperty -Path $Path -Name ScreenSaveActive
                      Write-Log "[$(Get-Date)] $CurrentVal"
                    } Catch {
                      $CurrentVal = False
                    } Finally {
                      if ($CurrentVal.ScreenSaveActive -ne 0) {
                        Set-ItemProperty -Path $Path -Name ScreenSaveActive -Value 0 *>> $Logfile
                        Write-Log "[$(Get-Date)] Screensaver Disabled."
                      } Else {
                        Write-Log "[$(Get-Date)] Screensaver Already Disabled."
                      }
                    }
                }
                function Set-DisableUAC (){
                    $Path = "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System"
                    $CurrentVal = Get-ItemProperty -Path $Path -Name ConsentPromptBehaviorAdmin
                    if ($CurrentVal.ConsentPromptBehaviorAdmin -ne 00000000) {
                        Set-ItemProperty -Path $Path -Name "ConsentPromptBehaviorAdmin" -Value 00000000 *>> $Logfile
                        Write-Log "[$(Get-Date)] UAC Disabled."
                    } Else {
                        Write-Log "[$(Get-Date)] UAC Already Disabled."
                    }
                }
                function Set-DisableIESecurity (){
                    $AdminKey = "HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components\{A509B1A7-37EF-4b3f-8CFC-4F3A74704073}"
                    $UserKey = "HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components\{A509B1A8-37EF-4b3f-8CFC-4F3A74704073}"
                    $CurrentVal = Get-ItemProperty -Path $AdminKey -Name "IsInstalled"
                    if ($CurrentVal.IsInstalled -ne 0) {
                        Set-ItemProperty -Path $AdminKey -Name "IsInstalled" -Value 0 *>> $Logfile
                        Set-ItemProperty -Path $UserKey -Name "IsInstalled" -Value 0 *>> $Logfile
                        Write-Log "[$(Get-Date)] IE ESC Disabled."
                    } Else {
                        Write-Log "[$(Get-Date)] IE ESC Already Disabled."
                    }
                }
                function Set-StableClock (){
                    $useplatformclock = bcdedit | Select-String -pattern "useplatformclock        Yes"
                    if ($useplatformclock) {
                        Write-Log "[$(Get-Date)] Platform Clock Already Enabled."
                    } Else {
                        bcdedit /set  useplatformclock true *>> $Logfile
                        Write-Log "[$(Get-Date)] Platform Clock Enabled."
                    }
                }
                function Set-DisableShutdownTracker (){
                    $Path = 'HKLM:\Software\Microsoft\Windows\CurrentVersion\Reliability'
                    Try {
                        $CurrentVal = Get-ItemProperty -Path $Path -Name ShutdownReasonUI
                        Write-Log "[$(Get-Date)] $CurrentVal"
                    } Catch {
                        $CurrentVal = False
                    } Finally {
                        if ($CurrentVal.ShutdownReasonUI -ne 0) {
                            New-ItemProperty -Path $Path -Name ShutdownReasonUI -Value 0
                            Write-Log "[$(Get-Date)] Shutdown Tracker Disabled."
                        }Else{
                            Write-Log "[$(Get-Date)] Shutdown Tracker Already Disabled."
                        }
                    }
                }
                Function Set-WebPageTestInstall ($tempDir,$AgentDir,$wwwDir){
                    Copy-Item -Path $AgentDir\agent\* -Destination C:\wpt-agent -Recurse -Force *>> $Logfile
                    Copy-Item -Path $AgentDir\www\* -Destination C:\wpt-www -Recurse -Force *>> $Logfile
                }
                function Set-InstallAviSynth ($InstallDir){
                    $Installed = Test-Path "C:\Program Files (x86)\AviSynth 2.5" -pathType container
                    If ($Installed) {
                        Write-Log "[$(Get-Date)] AviSynth already installed."
                    } Else {
                        & "$InstallDir\Avisynth_258.exe" /S *>> $Logfile
                        Write-Log "[$(Get-Date)] AviSynth installed."
                    }
                }
                function Set-InstallDummyNet ($InstallDir){
                    Download-File -url $driver_installer_url -localpath $InstallDir -filename $driver_installer_file
                    Download-File -url $driver_installer_cert_url -localpath $InstallDir -filename $driver_installer_cert_file
                    $testsigning = bcdedit | Select-String -pattern "testsigning Yes"
                    if ($testsigning) {
                        Write-Log "[$(Get-Date)] Test Signing Already Enabled."
                    } Else {
                        bcdedit /set TESTSIGNING ON *>> $Logfile
                        Write-Log "[$(Get-Date)] Test Signing Enabled."
                    }
                }
                function Set-WebPageTestScheduledTask ($ThisHost, $User,$InstallDir){
                    $GetTask = Get-ScheduledTask
                    if ($GetTask.TaskName -match "wptdriver") {
                        Write-Log "[$(Get-Date)] Task (wptdriver) already scheduled."
                    } Else {
                        $A = New-ScheduledTaskAction -Execute "$InstallDir\wptdriver.exe"
                        $T = New-ScheduledTaskTrigger -AtLogon -User $User
                        $S = New-ScheduledTaskSettingsSet
                        $P = New-ScheduledTaskPrincipal -UserId "$ThisHost\$User" -LogonType ServiceAccount
                        Register-ScheduledTask -TaskName "wptdriver" -Action $A -Trigger $T -Setting $S -Principal $P *>> $Logfile
                        Write-Log "[$(Get-Date)] Task (wptdriver) scheduled."
                    }
                    $GetTask = Get-ScheduledTask
                    if ($GetTask.TaskName -match "urlBlast") {
                        Write-Log "[$(Get-Date)] Task (urlBlast) already scheduled."
                    } Else {
                        $A = New-ScheduledTaskAction -Execute "$InstallDir\urlBlast.exe"
                        $T = New-ScheduledTaskTrigger -AtLogon -User $User
                        $S = New-ScheduledTaskSettingsSet
                        $P = New-ScheduledTaskPrincipal -UserId "$ThisHost\$User" -LogonType ServiceAccount
                        Register-ScheduledTask -TaskName "urlBlast" -Action $A -Trigger $T -Setting $S -Principal $P *>> $Logfile
                        Write-Log "[$(Get-Date)] Task (urlBlast) scheduled."
                    }
                }
                function Set-ScheduleDefaultUserName ($ThisHost, $User, $Password, $InstallDir) {
                        Invoke-WebRequest $DefaultUserNameURL -OutFile "$InstallDir\DefaultUserName.ps1" *>> $Logfile
                        Replace-String -filePath "$InstallDir\DefaultUserName.ps1" -stringToReplace "%%USERNAME%%" -replaceWith $User
                        $A = New-ScheduledTaskAction -Execute "PowerShell.exe" -Argument "-ExecutionPolicy Bypass -File $InstallDir\DefaultUserName.ps1"
                        $T = New-ScheduledTaskTrigger -AtStartup
                        $S = New-ScheduledTaskSettingsSet
                        $D = New-ScheduledTask -Action $A -Trigger $T -Settings $S
                        Register-ScheduledTask -TaskName "DefaultUserName Fix" -InputObject $D -User $User -Password $Password *>> $Logfile
                }

                function Set-ScheduleFirstReboot ($ThisHost, $User, $Password, $InstallDir) {
                        Invoke-WebRequest $FirstRebootURL -OutFile "$InstallDir\FirstReboot.ps1" *>> $Logfile
                        $A = New-ScheduledTaskAction -Execute "PowerShell.exe" -Argument "-ExecutionPolicy Bypass -File $InstallDir\FirstReboot.ps1"
                        $T = New-ScheduledTaskTrigger -AtLogon -User $User
                        $S = New-ScheduledTaskSettingsSet
                        $D = New-ScheduledTask -Action $A -Trigger $T -Settings $S
                        Register-ScheduledTask -TaskName "FirstReboot" -InputObject $D -User $User -Password $Password *>> $Logfile
                }

                function Set-AgentUpdaterScheduledTask ($ThisHost, $User, $InstallDir) {
                      Invoke-WebRequest $AgentUpdaterURL -OutFile "$InstallDir\Agent-Updater.ps1"
                      $A = New-ScheduledTaskAction -Execute "PowerShell.exe" -Argument "-ExecutionPolicy Bypass -File $InstallDir\Agent-Updater.ps1"
                      $T = New-ScheduledTaskTrigger -AtLogon -User $User
                      $S = New-ScheduledTaskSettingsSet
                      $P = New-ScheduledTaskPrincipal -UserId "$ThisHost\$User" -LogonType ServiceAccount
                      Register-ScheduledTask -TaskName "WPT Agent Updater" -Action $A -Trigger $T -Setting $S -Principal $P *>> $Logfile
                }
                function Install-WebPlatformInstaller(){
                    Write-Log "[$(Get-Date)] Installing Web Platform Installer."
                    Download-File -url $wpi_msi_url -localpath $wpt_temp_dir -filename $wpi_msi_file
                    Install-MSI -MsiPath $wpt_temp_dir -MsiFile $wpi_msi_file
                }
                function Install-Apache (){
                    Write-Log "[$(Get-Date)] Installing Apache."
                    Download-File -url $vcpp_vc11_url -localpath $wpt_temp_dir -filename $vcpp_vc11_file
                    Download-File -url $apache_bin_url -localpath $wpt_temp_dir -filename $apache_bin_file
                    if ((Get-Service).Name -match "W3SVC"){
                        Write-Log "[$(Get-Date)] IIS is present on this Server. Stoping and Disabling the service"
                        Set-Service -Name W3SVC -StartupType Manual
                        Stop-Service -Name W3SVC -Force *>> $Logfile
                        Stop-Service -Name IISADMIN -Force *>> $Logfile
                    }else{
                        Write-Log "[$(Get-Date)] IIS is not present on this Server."
                    }

                    if ((Get-Service).Name -match "Apache2.4"){
                        Write-Log "[$(Get-Date)] Apache is already installed and the service is configured."
                    }else{
                        & "$wpt_temp_dir\vcredist_x86.exe" /q /norestart
                        Unzip-File -fileName $apache_bin_file -sourcePath $wpt_temp_dir -destinationPath $wpt_temp_dir
                        Move-Item "$wpt_temp_dir\Apache24" "C:\Apache24" -Force
                        $httpconf_path = 'C:\Apache24\conf\httpd.conf'
                        $httpconf_old_servername = '^\#ServerName www\.example\.com\:80$'
                        $httpconf_new_servername = "ServerName $($DomainName):80"
                        Replace-String -filePath $httpconf_path -stringToReplace $httpconf_old_servername -replaceWith $httpconf_new_servername

                        & C:\Apache24\bin\httpd.exe -k install *>> $Logfile
                        Start-Service -Name Apache2.4 *>> $Logfile
                    }
                }
                function Install-PHP (){
                    Write-Log "[$(Get-Date)] Installing PHP53."
                    Download-File -url $php_bin_url -localpath $wpt_temp_dir -filename $php_bin_file
                    Unzip-File -fileName $php_bin_file -sourcePath $wpt_temp_dir -destinationPath c:\php
                    Download-File -url $php_ini_url -localpath $wpt_temp_dir -filename "php.ini"
                    Copy-Item -Path $wpt_temp_dir\php.ini -Destination C:\php\ -Force *>> $Logfile
                    Download-File -url $apache_conf_url -localpath $wpt_temp_dir -filename "httpd.conf"
                    Copy-Item -Path $wpt_temp_dir\httpd.conf -Destination C:\Apache24\conf\httpd.conf -Force *>> $Logfile
                    Download-File -url $php_apc_url -localpath $wpt_temp_dir -filename $php_apc_file
                    Unzip-File -fileName $php_apc_file -sourcePath $wpt_temp_dir -destinationPath  C:\php\ext

                    Restart-Service -Name Apache2.4
                }
                function Install-Ffmeg (){
                    Write-Log "[$(Get-Date)] Installing Ffmeg."
                    Download-File -url $ffmeg_bin_url -localpath $wpt_temp_dir -filename $ffmeg_bin_file
                    Unzip-File -fileName $ffmeg_bin_file -sourcePath $wpt_temp_dir -destinationPath c:\ffmpeg

                    $ffmpeg_path = ";c:\ffmpeg\bin"
                    if (($env:Path).Contains($ffmpeg_path)){
                        Write-Log "[$(Get-Date)] ffmpeg path is already in the Env Path"
                    }else{
                        Write-Log "[$(Get-Date)] Adding the $ffmpeg_path to the Env Path"
                        setx PATH "$env:Path;$ffmpeg_path" /M
                    }
                    Restart-Service -Name Apache2.4 *>> $Logfile
                }
                function Enable-WebServerFirewall(){
                   Write-Log "[$(Get-Date)] Enabling port 80"
                    netsh advfirewall firewall add rule name="Open Port 80" dir=in action=allow protocol=TCP localport=80 *>> $Logfile
                }
                function Clean-Deployment{
                    #region Remove Automation initial firewall rule opener
                    if((Test-Path -Path 'C:\Cloud-Automation')){
                        Remove-Item -Path 'C:\Cloud-Automation' -Recurse *>> $Logfile
                    }
                    #endregion
                    #region Schedule Task to remove the Psexec firewall rule
                    $DeletePsexec = {
                        Remove-Item $MyINvocation.InvocationName
                        $find_rule = netsh advfirewall firewall show rule "PSexec Port"
                        if ($find_rule -notcontains 'No rules match the specified criteria.') {
                            Write-Host "Deleting firewall rule"
                            netsh advfirewall firewall delete rule name="PSexec Port" *>> $Logfile
                        }
                    }
                    $Cleaner = "C:\Windows\Temp\cleanup.ps1"
                    Set-Content $Cleaner $DeletePsexec
                    $ST_Username = "autoadmin"
                    net user /add $ST_Username $FtpPassword *>> $Logfile
                    net localgroup administrators $ST_Username /add *>> $Logfile
                    $ST_Exec = "C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe"
                    $ST_Arg = "-NoLogo -NonInteractive -WindowStyle Hidden -ExecutionPolicy ByPass C:\Windows\Temp\cleanup.ps1"
                    $ST_A_Deploy_Cleaner = New-ScheduledTaskAction -Execute $ST_Exec -Argument $ST_Arg
                    $ST_T_Deploy_Cleaner = New-ScheduledTaskTrigger -Once -At ((Get-date).AddMinutes(2))
                    $ST_S_Deploy_Cleaner = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -WakeToRun -DontStopIfGoingOnBatteries -StartWhenAvailable -MultipleInstances Parallel
                    Register-ScheduledTask -TaskName "Clean Automation" -TaskPath \ -RunLevel Highest -Action $ST_A_Deploy_Cleaner -Trigger $ST_T_Deploy_Cleaner -Settings $ST_S_Deploy_Cleaner -User $ST_Username -Password $FtpPassword *>> $Logfile
                    #endregion
                }
                function Set-WptConfig (){
                    Download-File -url $wpt_locations_ini -localpath "$wpt_www_dir\settings" -filename "locations.ini"
                    Download-File -url $wpt_settings_ini -localpath "$wpt_www_dir\settings" -filename "settings.ini"
                    Download-File -url $wpt_feeds_inc -localpath "$wpt_www_dir\settings" -filename "feeds.inc"
                    Download-File -url $wpt_urlBlast_ini -localpath $wpt_agent_dir -filename "urlBlast.ini"
                    Download-File -url $wpt_wptdriver_ini -localpath $wpt_agent_dir -filename "wptdriver.ini"
                }
                function Set-ClosePort445 (){
                    $CurrentVal = Get-NetFirewallRule
                    if ($CurrentVal.InstanceID -match "PSexec Port" -and $CurrentVal.Enabled -eq "true") {
                        Disable-NetFirewallRule -Name "PSexec Port" *>> $Logfile
                        Write-Log "[$(Get-Date)] Port PSexec Port Disabled."
                    } Elseif($CurrentVal.InstanceID -match "PSexec Port" -and $CurrentVal.Enabled -eq "false"){
                        Write-Log "[$(Get-Date)] Port PSexec Port Already Disabled."
                    }Else {
                        Write-Log "[$(Get-Date)] Port PSexec Port rules does not exist."
                    }
                }
                function Disable-FindNetDevices(){
                    Set-Service fdPHost -StartupType Manual
                    Stop-Service fdPHost -force
                }
                #region => Main
                Set-WptFolders
                Download-File -url $wpt_zip_url -localpath $wpt_temp_dir -filename $wpt_zip_file
                Download-File -url $driver_installer_url -localpath $wpt_agent_dir -filename $driver_installer_file
                Download-File -url $driver_installer_cert_url -localpath $wpt_temp_dir -filename $driver_installer_cert_file
                Unzip-File -fileName $wpt_zip_file -sourcePath $wpt_temp_dir -destinationPath $wpt_agent_dir
                Set-WebPageTestUser -Username $wpt_user -Password $wpt_password
                Set-AutoLogon -Username $wpt_user -Password $wpt_password
                Set-DisableServerManager
                Set-MonitorTimeout
                Set-DisableScreensaver
                Set-DisableUAC
                Set-DisableIESecurity
                Set-StableClock
                Set-DisableShutdownTracker
                Set-WebPageTestInstall -tempDir $wpt_temp_dir -AgentDir $wpt_agent_dir
                Set-InstallAviSynth -InstallDir $wpt_agent_dir
                Set-InstallDummyNet -InstallDir $wpt_agent_dir
                Set-WebPageTestScheduledTask -ThisHost $wpt_host -User $wpt_user -InstallDir $wpt_agent_dir
                Set-ScheduleDefaultUserName -ThisHost $wpt_host -User $wpt_user -Password $wpt_password -InstallDir $wpt_agent_dir
                Set-ScheduleFirstReboot -ThisHost $wpt_host -User $wpt_user -Password $wpt_password -InstallDir $wpt_agent_dir
                Set-AgentUpdaterScheduledTask -ThisHost $wpt_host -User $wpt_user -InstallDir $wpt_agent_dir
                Install-WebPlatformInstaller
                Install-Apache
                Install-PHP
                Install-Ffmeg
                Set-WptConfig
                Enable-WebServerFirewall
                Disable-FindNetDevices
                Set-ClosePort445
                #endregion
            }
            #endregion
            #region MAIN : Deploy Web Pagge Test
            Deploy-WebPagetest -DomainName "%wptdomain%" -wpt_user "%wptusername%" -wpt_password "%wptpassword%"
            #endregion
            # Create Shortcut to IE
            $WshShell = New-Object -ComObject WScript.Shell
            $Shortcut = $WshShell.CreateShortcut("C:\Users\Public\Desktop\Internet Explorer.lnk")
            $Shortcut.TargetPath = "C:\Program Files\Internet Explorer\iexplore.exe"
            $Shortcut.Save()
            # Schedule Reboot
            $Now = Get-Date
            $Future = $Now.AddMinutes(5)
            $Hour = $Future.Hour
            $Minute = $Future.Minute
            $Time = "${Hour}:${Minute}"
            schtasks /Create /SC ONCE /RU SYSTEM /TN "Single Reboot" /TR "shutdown -r" /ST $Time
          params:
            "%wptdomain%" : { get_param: domain }
            "%wptusername%" : { get_param: wpt_username }
            "%wptpassword%" : { get_attr: [wpt_password,value] }

  # Random password generation
  wpt_password:
    type: OS::Heat::RandomString
    properties:
      length: 14
      character_classes:
        - class: digits
          min: 1
        - class: uppercase
          min: 1
        - class: lowercase
          min: 1

outputs:

  server_ip:
    value: { get_attr: [ rs_windows_server, accessIPv4 ] }
    description: Server IP

  admin_password:
    value: { get_attr: [ rs_windows_server, admin_pass] }
    description: Administrator Password

  site_domain:
    description: Web Page Test Domain name
    value: { get_param: domain }

  site_wpt_user:
    description: WPT User
    value: { get_param: wpt_username }

  site_wpt_password:
    description: WPT Password
    value: { get_attr: [wpt_password, value] }
